## 📌제네릭(Generic) 이란?

제네릭(Generic)은 **클래스나 메소드에서 타입을 파라미터로 지정**할 수 있는 기능

### 🔹 제네릭을 사용하는 이유

- **컴파일 타임에서 타입 체크 가능** → 런타임 오류 방지
- **형변환(Casting) 불필요** → 코드 간결화
- **재사용성 증가** → 다양한 타입을 처리하는 유연한 코드 작성 가능

---

## 1️⃣ 제네릭 사용법

### 🔹 제네릭 클래스

**제네릭을 클래스에서 사용하는 경우**, 클래스 이름 뒤에 `<T>`와 같은 타입 파라미터를 선언

```java
// 제네릭 클래스 정의
class Box<T> {
    private T item;

    public void setItem(T item) {
        this.item = item;
    }

    public T getItem() {
        return item;
    }
}

public class Main {
    public static void main(String[] args) {
        Box<String> stringBox = new Box<>(); // T → String
        stringBox.setItem("Hello, Generics!");
        System.out.println(stringBox.getItem()); // 출력: Hello, Generics!

        Box<Integer> intBox = new Box<>(); // T → Integer
        intBox.setItem(100);
        System.out.println(intBox.getItem()); // 출력: 100
    }
}
```

✔️ `<T>` → 타입 파라미터 (`T`, `E`, `K`, `V` 등 자유롭게 설정 가능)

✔️ **타입 지정** (`Box<String>`, `Box<Integer>`) → String과 Integer 타입을 각각 사용

---

## 2️⃣ 제네릭 주요 개념 (바운디드 타입, 와일드 카드)

### 🔹 바운디드 타입 (Bounded Type)

특정 타입으로 제한하고 싶다면 `extends` 키워드를 사용하여 상위 클래스를 지정

```java
// Number 또는 그 하위 클래스만 사용 가능
class NumberBox<T extends Number> {
    private T num;

    public NumberBox(T num) {
        this.num = num;
    }

    public double getDoubleValue() {
        return num.doubleValue(); // Number의 메소드 사용 가능
    }
}

public class Main {
    public static void main(String[] args) {
        NumberBox<Integer> intBox = new NumberBox<>(10);
        System.out.println(intBox.getDoubleValue()); // 출력: 10.0

        NumberBox<Double> doubleBox = new NumberBox<>(5.5);
        System.out.println(doubleBox.getDoubleValue()); // 출력: 5.5

        // NumberBox<String> strBox = new NumberBox<>("Hello"); ❌ 오류 발생
    }
}
```

✔️ `T extends Number` → `Number` 및 그 하위 타입(`Integer`, `Double` 등)만 허용

✔️ `Number` 클래스의 `doubleValue()` 메소드 사용 가능

### 🔹 와일드카드(Wildcard)

와일드카드는 `?`를 사용하여 **제네릭 타입을 유연하게 처리**할 때 사용

```java
class Printer {
    public static void printList(List<?> list) { // 와일드카드 사용
        for (Object obj : list) {
            System.out.println(obj);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        List<Integer> intList = Arrays.asList(1, 2, 3);
        List<String> strList = Arrays.asList("A", "B", "C");

        Printer.printList(intList); // 출력: 1, 2, 3
        Printer.printList(strList); // 출력: A, B, C
    }
}
```

✔️ `List<?>` → **모든 타입을 허용**하는 리스트

### 📌 와일드카드의 종류

- **`<?>`**
    
    모든 타입 허용
    
- **`<? extends T>`**
    
    `T`와 그 하위 타입만 허용
    
- **`<? super T>`**
    
    `T`와 그 상위 타입만 허용
    

```java
class NumberPrinter {
    public static void printNumbers(List<? extends Number> list) {
        for (Number num : list) {
            System.out.println(num);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        List<Integer> intList = Arrays.asList(1, 2, 3);
        List<Double> doubleList = Arrays.asList(1.1, 2.2, 3.3);

        NumberPrinter.printNumbers(intList); // ✅ 허용
        NumberPrinter.printNumbers(doubleList); // ✅ 허용
        // NumberPrinter.printNumbers(Arrays.asList("A", "B", "C")); ❌ 오류
    }
}
```

✔️ `<? extends Number>` → `Number`와 그 하위 타입(`Integer`, `Double`)만 허용

---

## 3️⃣ 제네릭 메소드 만들기

### 🔹 제네릭 메소드

클래스 전체가 아닌 **특정 메소드에서만 제네릭을 사용할 경우** `<T>`를 메소드 앞에 선언

```java
class Util {
    // 제네릭 메소드 선언 (타입 T 사용)
    public static <T> void printItem(T item) {
        System.out.println("출력: " + item);
    }
}

public class Main {
    public static void main(String[] args) {
        Util.printItem("Hello");  // 출력: Hello
        Util.printItem(123);      // 출력: 123
        Util.printItem(3.14);     // 출력: 3.14
    }
}
```

✔️ `<T>`는 반환 타입 앞에 선언

✔️ **제네릭 메소드** (`<T> void printItem(T item)`) → 메소드 내에서만 제네릭 사용 가능

---

## 4️⃣ `Erasure`

### 🔹 `Erasure`(타입 소거)란?

**제네릭은 컴파일 타임에만 존재**하며, **런타임에는 제거(Eraser)됨**

컴파일 후에는 **모든 제네릭 타입 정보가 사라지고, Object 또는 제한된 상위 타입(바운디드 타입)으로 변환**

```java
import java.util.*;

public class ErasureTest {
    public static void main(String[] args) {
        List<String> strList = new ArrayList<>();
        List<Integer> intList = new ArrayList<>();

        System.out.println(strList.getClass() == intList.getClass()); // true
    }
}
```

✔️ `List<String>` 과 `List<Integer>` 는 **컴파일 후 동일한** `List` **타입**이 되어 같은 클래스 객체를 공유

### 🔹 `Erasure` 후 코드 변화

- **원본 코드 (제네릭 사용)**

```java
class Box<T> {
    private T item;

    public void setItem(T item) {
        this.item = item;
    }

    public T getItem() {
        return item;
    }
}
```

- **컴파일 후 변환된 코드 (Erasure)**

```java
class Box {
    private Object item;  // T → Object로 변환됨

    public void setItem(Object item) {  // 제네릭 타입 제거
        this.item = item;
    }

    public Object getItem() {  // 반환 타입도 Object로 변환됨
        return item;
    }
}
```

✔️ 컴파일 후에는 `T`가 사라지고 `Object` 타입으로 변환됨

📌`T extends Number` 같은 바운디드 타입을 사용하면, Erasure 후 `T`가 `Object`로 변환되지 않고

**제한된 상위 타입**(`T extends Number` → `Number`)으로 변환됨
